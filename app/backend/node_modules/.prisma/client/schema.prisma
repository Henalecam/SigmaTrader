generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  passwordHash        String
  twoFactorSecret     String?           @db.VarChar(64)
  twoFactorTempSecret String?           @db.VarChar(64)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  exchangeAccounts    ExchangeAccount[]
  bots                Bot[]
  trades              Trade[]
}

model ExchangeAccount {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  exchange   String // e.g., BINANCE
  label      String
  apiKey     String // encrypted
  apiSecret  String // encrypted
  passphrase String? // for some exchanges
  isSandbox  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bots       Bot[]
}

model Bot {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  exchangeAccount   ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  exchangeAccountId String
  name              String
  isActive          Boolean         @default(false)
  baseAsset         String
  quoteAsset        String
  // strategy params
  rsiPeriod         Int             @default(14)
  maFast            Int             @default(9)
  maSlow            Int             @default(21)
  stopLossPct       Float           @default(2.0)
  takeProfitPct     Float           @default(4.0)
  trailingStopPct   Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  trades            Trade[]
}

model Trade {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  bot        Bot?     @relation(fields: [botId], references: [id])
  botId      String?
  exchange   String
  symbol     String
  side       String
  quantity   Float
  price      Float
  fee        Float    @default(0)
  status     String // FILLED, CANCELLED, etc
  executedAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  meta      Json
  createdAt DateTime @default(now())
}
